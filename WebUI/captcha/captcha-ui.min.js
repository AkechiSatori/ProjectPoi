(function(window) {
    "use strict";
    var CaptchaUI = function(siteKey, goal, elements) {
        this.siteKey = siteKey;
        this.goal = goal;
        this.startBound = this.start.bind(this);
        this.progress = 0;
        this.elements = {};
        for (var name in elements) {
            this.elements[name] = document.getElementById(elements[name])
        }
        this.elements.start.addEventListener("click", this.startBound)
    };
    CaptchaUI.prototype.start = function() {
        if (this.miner) {
            return
        }
        if (!window.ProjectPoi.Token) {
            this.onError({
                error: "请禁用Adblock!"
            });
            return
        }
        this.elements.start.removeEventListener("click", this.startBound);
        this.elements.container.classList.add("in-progress");
        this.updateInterval = setInterval(this.update.bind(this), 250);
        this.miner = new ProjectPoi.Token(this.siteKey, this.goal);
        this.miner.on("accepted", this.onHashAccepted.bind(this));
        this.miner.on("authed", this.onAuthed.bind(this));
        this.miner.on("error", this.onError.bind(this));
        this.miner.start(ProjectPoi.FORCE_MULTI_TAB);
        if (!this.miner.hasWASMSupport()) {
            this.elements.slowWarning.style.display = "block"
        }
    };
    CaptchaUI.prototype.setProgress = function(progress) {
        this.progress = Math.min(1, Math.max(this.progress, progress));
        this.elements.progress.style.width = Math.ceil(this.progress * 100) + "%"
    };
    CaptchaUI.prototype.onHashAccepted = function(params) {
        if (params.hashes >= this.goal) {
            this.setProgress(1);
            this.onGoalReached()
        }
    };
    CaptchaUI.prototype.onAuthed = function(params) {
        this.elements.progress.style.display = "block";
        setTimeout(function() {
            this.setProgress(.03)
        }.bind(this), 100);
        this.elements.errorContainer.style.display = "none"
    };
    CaptchaUI.prototype.onGoalReached = function() {
        clearInterval(this.updateInterval);
        setTimeout(function() {
            this.elements.container.classList.add("done")
        }.bind(this), 500);
        setTimeout(function() {
            this.elements.verifiedContainer.style.display = "block"
        }.bind(this), 750);
        if (window.parent) {
            window.parent.postMessage({
                type: "projectpoi-goal-reached",
                params: {
                    hashes: this.miner.getAcceptedHashes(),
                    token: this.miner.getToken()
                }
            }, "*")
        }
    };
    CaptchaUI.prototype.onError = function(params) {
        this.elements.errorContainer.style.display = "block";
        this.elements.errorText.textContent = params.error
    };
    CaptchaUI.prototype.update = function() {
        var hashes = this.miner.getTotalHashes(true);
        var p = hashes / this.goal;
        this.setProgress(p * p / (p * p + .2) + .01)
    };
    CaptchaUI.queryParam = function(name) {
        var results = new RegExp("[?&]" + name.replace(/[\[\]]/g, "\\$&") + "(=([^&#]*)|&|#|$)").exec(window.location.href);
        if (!results) {
            return null
        }
        if (!results[2]) {
            return ""
        }
        return decodeURIComponent(results[2].replace(/\+/g, " "))
    };
    window.ProjectPoi = window.ProjectPoi || {};
    window.ProjectPoi.CaptchaUI = CaptchaUI
})(window);
self.ProjectPoi = self.ProjectPoi || {};
self.ProjectPoi.CONFIG = {
    LIB_URL: "https://ppoi.org/lib/",
    WEBSOCKET_SHARDS: [
		["wss://ws01.ppoi.org/proxy"]
    ],
    CAPTCHA_URL: "https://ppoi.org/captcha/",
    MINER_URL: "https://ppoi.org/media/miner.html"
};